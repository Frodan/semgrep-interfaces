syntax = "proto3";

package semgrep_studio_v1;

option go_package = "semgrep_studio.v1";

import "protos/semgrep_output_v1.proto";

enum RuleFormat {
  YAML = 0;
  JSON = 1;
  JSONNET = 2;
}

enum RepositoryScanRefType {
    REPOSITORY_SCAN_REF_TYPE_UNSPECIFIED = 0;
    REPOSITORY_SCAN_REF_TYPE_HEAD = 1;
    REPOSITORY_SCAN_REF_TYPE_COMMIT = 2;
    REPOSITORY_SCAN_REF_TYPE_BRANCH = 3;
}

message ScanRequestRepository {
    string clone_url = 2;
    RepositoryScanRefType ref_type = 3;
    string scan_ref = 4;
}

message ScanRequest {
    // the rule raw content
    string rule = 1;
    // how to parse the rule content
    RuleFormat rule_format = 2;

    // list of repos to scan, e.g. ["semgrep", "semgrep-app"]
    // Note that semgrep-server must be setup with those
    // same repos and use the same names
    repeated string repository_names = 3 [deprecated = true];

    repeated ScanRequestRepository repositories = 4;
}

message ScanResult {
    // same as one of the repository_names in the request
    string repository_name = 1;
    semgrep_output_v1.CliMatch cli_match = 2;
}

message ResyncTargetsRequest {
    // name of repository to resync targets of
    string repository_name = 1;
}

message ResyncTargetsResponse {
    string repository_name = 1;
    uint32 old_target_count = 2;
    uint32 new_target_count = 3;
}

service ScanService {
    // we provide a streaming interface here! to return results as soon as they arrive!
    rpc Scan(ScanRequest) returns (stream ScanResult) {};

    // tell semgrep-server to re-sync the list of targets (files to scan) for a repository
    rpc ResyncTargets(ResyncTargetsRequest) returns (ResyncTargetsResponse) {};
}
