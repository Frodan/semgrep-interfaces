(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)
(* Type definitions for Semgrep CLI JSON output format using ATD.
 *
 * This file specifies for now mostly the JSON format of the 'scan' command
 * (the default command of semgrep).
 *
 * For the definitions of the Semgrep input, see the rule_schema.yaml file
 * in the semgrep repository.
 *
 * This file has the _v0 suffix to explicitely represent the
 * version of this JSON format. If you need to extend this file, please
 * be careful because you may break consumers of this format (e.g., the
 * Semgrep playground or Semgrep App backend or external users of this JSON). See
 * https://atd.readthedocs.io/en/latest/atdgen-tutorial.html?highlight=json#smooth-protocol-upgrades
 * for more information on how to smoothly extend the types in this file.
 *
 * The versioning of this file should match the versioning of Semgrep.
 * Any backward incompatible changes should require to upgrade the major version
 * of Semgrep as this JSON output is part of the "API" of Semgrep
 * (any incompatible changes to the rule format should also require a major
 *  version upgrade).
 *
 * This file currently contains also the type definitions for semgrep-core's
 * JSON output, meant for the semgrep Python wrapper.
 * LATER: when ATD gets a module system, we can split this file in
 * different files (e.g., in Output_from_core.atd), but for now it's simpler
 * to have everything in one file.
 *
 * This file is translated into OCaml modules by atdgen:
 *  - Xxx_t: type definitions
 *  - Xxx_j: json serialization of those types
 *  Look for the corresponding Xxx_t.mli, Xxx_j.mli, etc.
 *  under dune's _build folder (where Xxx is Output_from_core).
 *
 * This file is also translated in Python modules by atdpy,
 * in jsonschema/openapi spec by atdcat, and in Typescript modules by
 * atdts.
 *
 * history:
 *  - the types in this file were originally inferred from JSON_report.ml for
 *    use by spacegrep when it was separate from semgrep-core. It's now also used
 *    in JSON_report.ml
 *
 * There are other important form of outputs which are not specified here:
 *  - the schema for the generic AST dump is in AST_generic_v1.atd
 *  - The parsing stats of semgrep-core -parsing_stats -json have its own
 *    Parsing_stats.atd
 *
 * TODO:
 *   - see the TODO: (high-prio) and LATER: (low-prio) tags in this file
 *)

(*****************************************************************************)
(* Imports *)
(*****************************************************************************)

(* escape hatch *)
type raw_json <ocaml module="Yojson.Safe" t="t" attr="deriving show"> = abstract

(*****************************************************************************)
(* Versioning *)
(*****************************************************************************)
(* semantic versioning, see http://semver.org/spec/v2.0.0.html *)
type semver <ocaml attr="deriving show"> = string (* e.g., "0.91.0" *)

(*****************************************************************************)
(* Location *)
(*****************************************************************************)
(* note that there is no filename here like in 'location' below *)
type position
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True, order=True)"> = {
  line: int; (* starts from 1 *)
  col: int; (* starts from 1 *)
  (* TODO: seems optional in some CLI output, merge with position_bis *)
  offset: int; (* byte position from the beginning of the file, starts at 0 *)
}

(* a.k.a range *)
type location
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  path: string (* source file *);
  start: position;
  end <ocaml name="end_">: position;
}

(*****************************************************************************)
(* Core Match result *)
(*****************************************************************************)

type rule_id
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = string

type core_match
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  rule_id: rule_id;
  location: location;
  extra: core_match_extra;
}

type core_match_extra
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  ?message: string option; (* rule.message (?) *)
  metavars: metavars;
  ?dataflow_trace: dataflow_trace option;
}

(* Provides information about dataflow that leads to a finding. For now, just
 * provides taint traces (i.e. information about the taint source and how the
 * source reaches the sink). In the future, we may want to include more dataflow
 * information. For example, we may want to explain how constant propagation
 * leads to a finding. *)
type dataflow_trace
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  ?taint_source: location list option;
  (* Intermediate variables which are involved in the dataflow. For taint, this
   * explains how the taint flows from the source to the sink. *)
  ?intermediate_vars: location list option;
  (* For now, omitting the taint sink, since it's redundant data except for
   * certain cases that only appear with DeepSemgrep. We can add it in later
   * without breaking consumers. *)
}

(* Name/value map of the matched metavariables.
 * The leading '$' must be included in the metavariable name.
 * TODO: semgrep-core always return a metavars, but dependency_aware Python code
 * does not always generate a metavars
*)
type metavars <ocaml attr="deriving show"> = (string * metavar_value) list
   <json repr="object">
   <python repr="dict">

type metavar_value
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  (* for certain metavariable like $...ARGS, 'end' may be equal to 'start'
   * to represent an empty metavariable value. The rest of the Python
   * code (message metavariable substitution and autofix) works
   * without change for empty ranges (when end = start).
   *)
  start: position;
  end <ocaml name="end_">: position;
  abstract_content: string; (* value? *)
  ?propagated_value: svalue_value option;

  (* The unique ID of a metavariable indicates the kind object that was
   * captured for equality purposes. In the simplest case, this is only
   * the name of the metavariable. In semgrep, it can additionally include
   * a disambiguator. For example, consider this target code:
   *
   *   let foo = 1;
   *   {
   *     let foo = 2;
   *   }
   *
   * The pattern '$X' would match the first 'foo' and the second 'foo'.
   * In semgrep, these two 'foo's are identified as different variables,
   * and this is done by setting the metavariable capture's unique ID to
   * something like foo-1' and 'foo-2'. Even though their contents look
   * identical, they're not the same thing.
   *
   * Spacegrep doesn't make this analysis, so these two captures will
   * be considered identical, which is not as good.
  *)
  unique_id: unique_id;
}

type svalue_value
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  ?svalue_start: position option;
  ?svalue_end: position option;
  svalue_abstract_content: string; (* value? *)
}

(* This is just the variant for type=AST.
 * In order to accommodate two record types into one variant, use
 * the atdgen feature called a json adapter.
*)
type unique_id
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  (* TODO: we should use a sum type here because it's either
   * AST of md5sum | Id of sid * ... but that would require
   * to update the python side, so for now I use optional
   * fields, but really at least one of md5sum or sid should be a Some
   *)
  type_ <json name="type">: unique_id_type;
  (* AST case *)
  ?md5sum: string option;
  (* ID case *)
  ?sid: int option;
}

type unique_id_type
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = [
  | ID <json name="id">
  | AST
]

(*****************************************************************************)
(* Core Errors *)
(*****************************************************************************)

(* See Semgrep_error_code.ml *)
type core_error
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  ?rule_id: rule_id option;
  error_type: core_error_kind;
  severity: core_severity;
  location: location;
  message: string;
  ?details: string option;
  }

(* coupling: if you add a constructor here with arguments, you probably need to adjust
 * _error_type_string() in semgrep/.../error.py
 * TODO? move all those <json name="..."> in _error_type_string()
 *)
type core_error_kind
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True, order=True)"> = [
  (* File parsing related errors *)
  | LexicalError <json name="Lexical error">
  | ParseError (* a.k.a SyntaxError *) <json name="Syntax error">
  | SpecifiedParseError <json name="Other syntax error">
  | AstBuilderError <json name="AST builder error">
  (* Pattern parsing related errors.
   * There are more precise info about the error in
   * Rule.invalid_rule_error_kind in Rule.ml.
   * TODO? should we move invalid_rule_error_kind here?
   *)
  | RuleParseError <json name="Rule parse error">
  (* the string list is the "YAML path" of the pattern, e.g. ["rules"; "1"; ...] *)
  | PatternParseError <json name="Pattern parse error"> of string list
  | InvalidYaml <json name="Invalid YAML">
  (* matching (semgrep) related *)
  | MatchingError (* internal error, e.g., NoTokenLocation *) <json name="Internal matching error">
  | SemgrepMatchFound (* TODO of string (* check_id *) *) <json name="Semgrep match found">
  | TooManyMatches <json name="Too many matches">
  (* other *)
  | FatalError (* missing file, OCaml errors, etc. *) <json name="Fatal error">
  | Timeout <json name="Timeout">
  | OutOfMemory <json name="Out of memory">
  (* since semgrep 0.97 *)
  | PartialParsing of location list (* list of skipped tokens *)
] <ocaml repr="classic">


type core_severity
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = [
  | Error <json name="error">
  | Warning <json name="warning">
] <ocaml repr="classic">


type core_stats
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  okfiles: int;
  errorfiles: int;
}

(*****************************************************************************)
(* Skipping information *)
(*****************************************************************************)

(* If the 'rule_id' field is missing, the target is assumed to have
 *  been skipped for all the rules.
 *)
type skipped_target
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  path: string;
  reason: skip_reason;
  details: string;
  ?rule_id: rule_id option;
}

(* A reason for skipping a target file or a pair (target, rule). *)
type skip_reason
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = [
  | Excluded_by_config <json name="excluded_by_config">
  | Wrong_language <json name="wrong_language">
  | Too_big <json name="too_big">
  | Minified <json name="minified">
  | Binary <json name="binary">
  | Irrelevant_rule <json name="irrelevant_rule">
  | Too_many_matches <json name="too_many_matches">
] <ocaml repr="classic">

type skipped_rule
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  rule_id: rule_id;
  details: string;
  (* position of the error in the rule file *)
  position: position;
}

(*****************************************************************************)
(* Core Profiling information *)
(*****************************************************************************)

type core_timing
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  targets: target_time list;

  (* List of rules received by core *)
  (* Needs to be separate to include rules read but not run on any target *)
  rules: rule_id list;
  ?rules_parse_time: float option; (* not used in spacegrep *)
}

(* later: could refactor [target_time] and [rule_times] to be equal
 * to cli_target_times *)
type target_time
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  path: string;
  (* parse and match time for each rule on target *)
  rule_times: rule_times list;
  (* run time for all rules on target *)
  run_time: float;
}

type rule_times
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  rule_id: rule_id;
  parse_time: float;
  match_time: float;
}

(*****************************************************************************)
(* Synthesizing from diffs (see locate_patched_functions in Synthesizing.mli) *)
(*****************************************************************************)
type cve_result
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
   url: string;
   filename: string;
   funcnames: string list
}

type cve_results
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = cve_result list

(*****************************************************************************)
(* Semgrep-core final output  *)
(*****************************************************************************)
type core_match_results
  <ocaml attr="deriving show">
  <python decorator="dataclass(frozen=True)"> = {
  matches: core_match list;
  errors: core_error list;

  skipped_targets <json name="skipped">: skipped_target list;
  (* skipped_rules was introduced  in semgrep 0.86 *)
  ?skipped_rules: skipped_rule list option;

  stats: core_stats;
  (* LATER: rename timing *)
  ?time: core_timing option;
}

(*****************************************************************************)
(* CLI Errors (called SemgrepError in error.py) *)
(*****************************************************************************)

(* TODO: replace SemgrepCoreError in error.py or use CliError as component *)
(* TODO: try to make it as close as possible to 'error' above *)
(* LATER: maybe replace those dataclasses.replace() in error.py
 * with direct assign to the field? after all we didn't generate
 * a frozen dataclass here
 *)
type cli_error<ocaml attr="deriving show"> = {
  code: int;
  (* TODO: use a variant *)
  level: string;
  (* TODO: use a variant that or inherit/extend core_error_kind
   * Right now we can't just use core_error_kind because SemgrepException
   * can also use self.__name__ for the type_, so we need to list
   * all the possible classes here (see error.py)
   *)
  type_ <json name="type">: string;

  (* LATER: use a variant instead of all those ?xxx types *)

  ?rule_id: rule_id option;

  (* for most parsing errors those are set *)
  ?message: string option; (* contains error location *)
  ?path: string option;

  (* for invalid rules, for ErrorWithSpan *)
  ?long_msg: string option;
  ?short_msg: string option;
  ?spans: error_span list option;
  ?help: string option;
}

(* TODO: get rid of rule_lang.Span *)
type error_span <ocaml attr="deriving show"> = {
    (* for InvalidRuleSchemaError *)
    (* LATER: could inherit location; but file: vs path: *)
    (* TODO: source hash should probably also be mandatory? *)
    file: string;
    start: position_bis;
    end <ocaml name="end_">: position_bis;
    ?source_hash: string option;

    (*  The path to the pattern in the yaml rule
     *  and an adjusted start/end within just the pattern
     *  Used to report playground parse errors in the simple editor
     *
     *  TODO: remove this or add back simple editor error highlighting
     *)
    ?config_start: position_bis nullable option;
    ?config_end: position_bis nullable option;
    ?config_path: string list nullable option;

    (* LATER: what is this for? *)
    ?context_start: position_bis nullable option;
    ?context_end: position_bis nullable option;
  }

(* LATER: merge with position, no offset: here, make it an option in position?
 * TODO: get rid of rule_lang.Position
*)
type position_bis <ocaml attr="deriving show"> = {
  line: int; (* starts from 1 *)
  col: int; (* starts from 1 *)
  }

(* from rule_lang.py in the Span class
 * "The path to the pattern in the yaml rule
 *  and an adjusted start/end within just the pattern
 *  Used to report playground parse errors in the simpler editor"
 *)


(*****************************************************************************)
(* Match result (called RuleMatch in rule_matches.py) *)
(*****************************************************************************)

(* TODO: replace RuleMatch in rule_matches.py or use CliMatch as component *)
(* TODO: try to make it as close as possible to 'match_' above *)
type cli_match <ocaml attr="deriving show"> = {
  check_id: rule_id;
  inherit location;
  extra: cli_match_extra;
}

(* TODO: use CliMatchExtra as component in RuleMatch *)
(* TODO: try to make it as close as possible to 'match_extra' above *)
type cli_match_extra <ocaml attr="deriving show"> = {
  (* TODO: inherit match_extra; but need ?metavars because of dependency_aware code *)
  ?metavars: metavars option;

  (* added by the CLI (see formatter/json.py) *)
  fingerprint: string;
  lines: string;

  (* fields coming from the rule *)
  message: string;
  metadata: raw_json;
  (* LATER: use a variant for severity *)
  severity: string;

  (* fields derived from the rule *)
  ?fix: string option;
  ?fix_regex: fix_regex option;

  (* extra fields *)
  ?is_ignored: bool option;
  (* added by dependency_aware code *)
  ?dependency_match_only: bool option;
  ?dependency_matches: raw_json option;

  (* TODO: done with monkey patching right now in the Python code,
   * and seems to be used only when sending findings to the App.
   *)
  ?fixed_lines: string list option;

  (* For now, present only for taint findings. May be extended to others later
   * on. *)
  ?dataflow_trace: dataflow_trace option;
}

type fix_regex <ocaml attr="deriving show"> = {
  regex: string;
  replacement: string;
  ?count: int option;
}

(*****************************************************************************)
(* Semgrep CLI final output *)
(*****************************************************************************)

type cli_output <ocaml attr="deriving show"> = {
    (* since: 0.92 *)
    ?version: semver option;

    errors: cli_error list;
    results: cli_match list;
    inherit cli_output_extra;
  }

type cli_output_extra <ocaml attr="deriving show"> = {
    paths: cli_paths;
    ?time: cli_timing option;
    (* seems unused, not in any results.json *)
    (* ?stats: cli_stats option; *)
    (* used only in TEXT format:
       ?color_output, per_finding_max_lines_limit, per_line_max_chars_limit
     *)
}

type cli_paths <ocaml attr="deriving show"> = {
    scanned: string list;
    (* LATER: either _comment or skipped:, use a variant *)
    ?_comment: string option;
    ?skipped: cli_skipped_target list option;
}

(* LATER: could merge with skipped_target above *)
type cli_skipped_target <ocaml attr="deriving show"> = {
    path: string;
    (* LATER: use a variant, reuse skip_reason above *)
    reason: string;
}

(* LATER: could merge with core_timing above
 * coupling: if you change the JSON schema below, you probably need to
 * also modify perf/run-benchmarks. Run locally  $ ./run-benchmarks --dummy --upload
 *)
type cli_timing <ocaml attr="deriving show"> = {
    rules: rule_id_dict list;
    rules_parse_time: float;
    (* LATER: define a cli_profiling_times with more precise keys *)
    profiling_times: (string * float) list <json repr="object"> <python repr="dict">;
    targets: cli_target_times list;
    total_bytes: int;
  }

(* LATER: should just use rule_id *)
type rule_id_dict <ocaml attr="deriving show"> = {
  id: rule_id;
}

(* LATER: get rid of profiler.dump_stats
type cli_profiling_times <ocaml attr="deriving show"> = {
   config_time: float;
   core_time: float;
   ignores_time: float;
   total_time: float;
}
*)

(* similar to the [target_time] and [rule_times] type above *)
type cli_target_times <ocaml attr="deriving show"> = {
    path: string;
    num_bytes: int;
    (* each elt in the list refers to a rule in cli_timing.rules *)
    match_times: float list;
    parse_times: float list;
    run_time: float;
}

(* TODO: the stats: field seems unused (could not find it in any e2e/.../results.json) *)
(*
type cli_stats <ocaml attr="deriving show"> = {
    (* (targets:, loc:, profiler:) *)
      xxx: int;
}
*)

(*****************************************************************************)
(* Semgrep CLI findings output for the App *)
(*****************************************************************************)
(* TODO: see semgrep/app/scans.py
 * there is also api_scans_meta, api_scans_ignores, and api_scans_complete
*)
type api_scans_findings <ocaml attr="deriving show"> = {
  (* TODO: ?version: semver option; *)
   findings: finding list;
   token: string nullable;
   gitlab_token: string nullable;
   searched_paths: string list;
   (* TODO: rule_id list *)
   rule_ids: string list;
   cai_ids: string list;
}

(* TODO: rewrite rule_matches.to_app_finding_format() *)
type finding <ocaml attr="deriving show"> = {
  check_id: rule_id;
  path: string;
  line: int;
  column: int;
  end_line: int;
  end_column: int;
  message: string;
  (* TODO: use variant *)
  severity: int;
  (* ?? *)
  index: int;
  commit_date: string;
  syntactic_id: string;
  (* since semgrep 0.98 *)
  ?match_based_id: string option;
  metadata: raw_json;
  is_blocking: bool;
  ?fixed_lines: string list option;
  ?sca_info: sca_info option;
  ?dataflow_trace: dataflow_trace option;
}

type sca_info <ocaml attr="deriving show"> = {
  dependency_match_only: bool;
  dependency_matches: raw_json;
}
